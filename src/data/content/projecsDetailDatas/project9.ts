export const project9 = {
  name: 'knockdog',
  pointcolor: 'before:bg-[#FA9B59]',
  title: 'KnockDog - 똑독',
  subtext:
    '강아지 유치원을 운영하는 사업체들을 B2B로서 강아지 일기장, 돌봄, 셔틀 관련 운영을 쉽게 도와줄 수 있는 어플리케이션입니다.\n\n 현재 프로젝트 진행 중이며, 개발 중인 상태에 합류하여 견주 마이페이지, 강아지 상세정보 페이지 등을 맡게 되었습니다. 또한 QA 단계에서 발생하는 이슈를 해결 중으로 24년도 안에 출시가 목표이고, 1차 MVP는 완료된 상태로 2차 MVP를 목표로 하고 있습니다.',
  data: '2024.03 - 진행중',
  team: '10인 (프론트엔드 5명, 백엔드 2명, 기획자 1명, 디자이너 2명)',
  tag: ['팀', '앱', '사이드'],
  blogurl: [
    {
      title: 'ios 모바일 환경에서 onBlur가 제대로 동작하지 않는 이슈',
      url: 'https://velog.io/@crg1050/사이드-프로젝트-모바일-환경에서-onBlur가-제대로-동작하지-않는-이슈',
    },
    {
      title: '프론트와 백엔드에서 관리하는 데이터 구분을 어떻게 정하지?',
      url: 'https://velog.io/@crg1050/사이드-프로젝트-프론트와-백엔드에서-관리하는-데이터-구분',
    },
  ],
  featinfo: [
    '카카오, 구글, 애플 로그인',
    '유치원 등록, 강아지 관리, 셔틀관련 운영, 알림장 서비스 등',
    '견주 정보, 강아지 상세정보, 알림장 열람 등',
  ],
  tools: [
    {
      title: 'React',
      detail:
        'React는 컴포넌트 기반으로 하며, 가상 DOM을 활용해 웹 애플리케이션의 성능을 최적화 합니다. 컴포넌트 재사용성을 높이고, 상태 관리를 용이하게 할 수 있습니다.',
    },
    {
      title: 'TypeScript',
      detail:
        'TypeScript는 정적 타입을 지원하는 JavaScript 슈퍼셋 언어로, 코드를 실행하기 전 오류를 잡아 줄 수 있습니다.',
    },
    {
      title: 'Recoil',
      detail:
        'Recoil은 상태 관리 라이브러리입니다. 이전 Redux와 달리 Atomic 방식으로 상태 관리의 복잡도를 줄이고 코드의 간결성을 높이는데 기여합니다.',
    },
    {
      title: 'Tanstack Query',
      detail:
        'Tanstack Query는 React 애플리케이션에서 데이터 가져오기, 관리 및 캐싱을 단순하게 만들어주는 JavaScript 라이브러리입니다. 서버로부터 데이터를 비동기적으로 가져오고 관리하기 위한 다양한 도구와 패턴을 제공하며, API 요청을 처리하고 캐싱하여 성능을 최적화할 수 있습니다.',
    },
    {
      title: 'Styled Components',
      detail:
        'Styled Components는 JavaScript 코드 내에서 CSS를 작성할 수 있게 해주는 라이브러리입니다. 컴포넌트와 스타일을 함께 정의해 컴포넌트 별로 스타일을 관리하고 재사용할 수 있습니다.',
    },
  ],
  parts: [
    {
      title: 'QA에서 발견된 문제점들을 적극적으로 해결하여 서비스 개선',
      detailList: ['백엔드, 기획 및 디자인 팀과 협업하며 Jira, Discord를 활용하여 이슈를 구체적으로 논의하고 해결'],
    },
    {
      title: 'CRUD 기능 구현을 통해 프론트엔드 전문성 강화',
      detailList: [
        '견주/강아지 정보 조회, 수정, 삭제, 업로드 기능을 구현',
        '프로필 사진 업로드 및 수정 기능 작업을 통해 사용자 경험 강화',
      ],
    },
    {
      title: '프로필 이미지 설정 및 수정 기능',
      detailList: [
        `\`ios\`환경 에서 발생하던 \`onBlur\` 이슈로 인해 프로필 이미지 수정이 불가능했던 문제를 해결`,
        `다양한 디바이스 환경에서도 동작하도록 코드 품질 개선`,
      ],
    },
    {
      title: 'Tanstack Query를 활용한 효율적인 비동기 처리 및 에러 핸들링',
      detailList: [
        `\`getQueryData\` 메서드와 \`staletime\` 등의 옵션을 활용해 캐시 된 데이터를 사용함으로써 불필요한 API 호출 감소`,
        `useQuery의 \`selet\` 옵션을 활용한 데이터 가공으로 일관된 반환 데이터와 코드 간소화`,
      ],
    },
    {
      title: 'React Hook Form을 통한 폼 상태관리 간소화 및 일관성 확보',
      detailList: [`\`useForm\` 훅으로 제어 컴포넌트를 관리하여 실시간 데이터 검증 및 에러 처리 구현`],
    },
  ],
  trouble: [
    {
      title: 'ios 환경에서 프로필 사진 수정 문제',
      detailList: [
        `**[문제점]** 프로필 사진 클릭 시 \`file uploader\`가 표시되도록 구현했지만, ios 환경에서는 다른 영역을 터치해도 focus가 이전 영역에 머물러 있어 blur가 제대로 동작하지 않는 문제가 발생했습니다.`,
        `**[해결]** 기존에는 \`onFocus\`와 \`onBlur\`를 통해 활성화된 UI를 boolean 데이터로 제어했지만, 클릭된 영역과 데이터가 일치하는지를 판단하도록 코드를 수정했습니다. 추가로 파일 선택 후 "취소"를 눌렀을 경우의 예외 상황을 처리하여 로직을 전반적으로 개선하고 코드 품질을 높였습니다.`,
        `**[회고]** 다양한 디바이스를 고려하며 작업해야 한다는 점을 깨달았습니다. 앞으로는 로컬 환경뿐만 아니라 여러 디바이스 환경에서 테스트를 진행해 안정성을 확보할 계획입니다.`,
      ],
    },
    {
      title: '프론트와 백엔드 데이터 관리 구분 문제',
      detailList: [
        `**[문제점]** 강아지의 탈퇴 유무 데이터를 프론트에서 관리하려면 \`localStorage\`나 \`Recoil\`을 사용해야 했습니다. 그러나 해당 데이터를 프론트에서 관리하는 것이 적절한지에 대해 고민이 있었습니다.`,
        `**[해결]** 팀원들과 논의한 결과, 프론트에서 관리할 경우 의존성이 높아지고 데이터의 신선도를 보장하기 어렵다는 결론을 내렸습니다. 이에 대해 백엔드 팀에 강아지 탈퇴 유무를 조회할 수 있는 API 생성을 요청하였고, 기존 localStorage 관리 로직을 API 호출로 변경했습니다. 이를 통해 코드가 간결해졌으며 의존성도 감소했습니다.`,
        `**[회고]** 해당 데이터의 \`Owner Ship\`이 어디에 있는지 먼저 명확히 판단해 보고, 혼자 판단하기 어려운 경우 팀원들과 문제를 공유해 다양한 관점을 들어보는 것이 중요하다는 점을 깨달았습니다. 팀워크와 커뮤니케이션을 통해 보다 효율적인 결정을 내릴 수 있었습니다.`,
      ],
    },
    {
      title: '프로젝트 개발 중 상태에서 합류하며 겪은 문제와 해결 과정',
      detailList: [
        `**[문제점]** 프로젝트 진행 중인 상태에서 합류하여 기존에 작업된 코드를 검토하며 컨벤션을 파악해야 했습니다. 또한, 익숙하지 않은 코드와 새로운 기술들이 많아 학습 시간이 추가로 필요했던 상황이었습니다.`,
        `**[해결]** 처음에는 간단한 퍼블리싱 작업부터 시작하여 프로젝트 전반의 컨벤션과 구조를 익혔습니다. 학습이 필요한 부분은 팀원들의 코드를 참고하며 작성 방식을 이해했고, 공식 문서를 통해 부족한 지식을 보완했습니다. 이를 통해 프로젝트에 점차 적응하며 효과적으로 기여할 수 있었습니다.`,
        `**[회고]** 초기에는 코드 파악과 학습해야 할 내용이 많아 막막했지만, 이를 통해 많은 성장을 이룰 수 있었습니다. 또한, 팀원들에게 배울 점이 많다는 것을 느끼며 스스로의 성장 가능성을 확인할 수 있었습니다.`,
      ],
    },
  ],
};
